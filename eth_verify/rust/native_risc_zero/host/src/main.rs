// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use alloy_primitives::FixedBytes;
use methods::{
    GUEST_CODE_FOR_ETH_BLOCK_VERIFICATION_ELF, GUEST_CODE_FOR_ETH_BLOCK_VERIFICATION_ID,
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde_json;
use std::fs::File;
use std::io::BufReader;
use wasm::{Block, Header};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let file = File::open("../../../inputs/block.json").expect("Failed to open file");
    let block_json: serde_json::Value =
        serde_json::from_reader(BufReader::new(file)).expect("Failed to parse JSON");
    let block: Block = serde_json::from_value(block_json.clone()).unwrap();
    let header: Header = serde_json::from_value(block_json.clone()).unwrap();

    let hash_str = block_json["hash"].as_str().unwrap();
    let hash_bytes = hex::decode(&hash_str[2..]).unwrap();

    let env = ExecutorEnv::builder()
        .write(&block)
        .unwrap()
        .write(&header)
        .unwrap()
        .write(&hash_bytes)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, GUEST_CODE_FOR_ETH_BLOCK_VERIFICATION_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(GUEST_CODE_FOR_ETH_BLOCK_VERIFICATION_ID)
        .unwrap();
}
